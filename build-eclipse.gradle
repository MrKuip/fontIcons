import groovy.xml.*

eclipse.classpath
{
  downloadSources = true
  downloadJavadoc = true
}

eclipse.classpath.file 
{
  // Fix the problem that this plugin doesn't put libraries on the module path (it puts them on the classpath)
  whenMerged 
  {
    entries.findAll { entry -> isModule(entry) }.each { entry -> entry.entryAttributes['module'] = 'true' }
  }
}

/*
eclipse {
  jdt {
    file {
      withProperties { properties ->
        properties['org.eclipse.jdt.core.formatter'] = file('KKU2.xml').absolutePath
        properties['org.eclipse.jdt.core.formatter.profile'] = 'KKU'
        properties['org.eclipse.jdt.core.formatter.settings'] = file('KKU2.xml').absolutePath
      }
    }
  }
  project {
    natures 'org.eclipse.jdt.core.javanature'
    buildCommand 'org.eclipse.jdt.core.javabuilder'
  }
}
*/



boolean isModule(entry) {

  print 'haha:' + entry
  // Only libraries can be modules
  if(entry == null || !entry.kind.equals("lib"))
  {
    return false;
  }

  // Test libraries should not be imported as modules because eclipse then 
  // needs the library be 'required' in module-info.java
  if ("true".equals(entry.entryAttributes['test']))
  {
    return false;
  }

  // All libraries that contain the module-info.class should be imported as modules!
  def moduleDescription = "jar --file $entry.path --describe-module".execute().text
  if( moduleDescription.contains('module-info.class'))
  {
    return true;
  }

  return false;
}


ext.createLauncher = { configurationName, project_attr, module_name, main_type ->
  file("../.metadata/.plugins/org.eclipse.debug.core/.launches/${configurationName}.launch").withWriter { writer ->
    // Create MarkupBuilder with 2 space indent
    def xml = new MarkupBuilder(new IndentPrinter(writer, "  ", true))

    xml.doubleQuotes = true
    xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8', standalone: 'no')

    xml.launchConfiguration('type': 'org.eclipse.jdt.launching.localJavaApplication') {
      stringAttribute(key: 'org.eclipse.jdt.launching.MAIN_TYPE', value: "${main_type}")
      stringAttribute(key: 'org.eclipse.jdt.launching.MODULE_NAME', value: "${module_name}")
      stringAttribute(key: 'org.eclipse.jdt.launching.PROJECT_ATTR', value: "${project_attr}")
    }
  }
}



